---
layout: post
title:  "Cross Side Scripiting Vulnerability"
categories: [Training, Vulnerability]
authorMain: Nestor N Torres
tag: Vulnerability
description: Training page to show what is Cross Side Scripting Vulnerability
---

<a id="Top"></a> 
### Contact
- [LinkedIn](https://www.linkedin.com/in/nanjuan/)
- Email: nestor@nntorres.com

## Cross-Site Scripting (XSS)

### What is Cross-Site Scripting?

Cross-Site Scripting (XSS) is a type of security vulnerability typically found in web applications. It allows attackers to inject malicious scripts into web pages viewed by other users. These scripts can then be used to steal information, such as login credentials or session cookies, or to deliver malware to unsuspecting users.

### Types of XSS

There are three main types of XSS:

1. **Stored XSS** (also known as Persistent XSS): The malicious script is stored on the server (for example, in a database). When other users visit that page, the script is delivered to and executed in their browser.
   
2. **Reflected XSS**: The malicious script is embedded in a URL. When a user clicks on the malicious link or submits a form that leads to the URL, the script is executed.
   
3. **DOM-based XSS**: The vulnerability exists in client-side scripts rather than server-side scripts. The malicious payload is executed as a result of modifying the DOM on the client side.

### How does XSS work?

Web applications often take user input and display it on web pages. If the application doesn't properly validate and escape the input, an attacker can insert a script tag (`<script>`) or other malicious content. When another user views the page, their browser will execute the malicious script.

### Example: A Simple XSS Vulnerability in Python3

Imagine a basic web application using Flask, a micro web framework for Python.

```python
from flask import Flask, request, render_template_string

app = Flask(__name__)

@app.route('/')
def index():
    name = request.args.get('name', 'Guest')
    return render_template_string('Hello, %s!' % name)

if __name__ == '__main__':
    app.run()
```

In this application, the server takes the `name` parameter from the URL and displays it back to the user. If someone visits `http://localhost:5000/?name=Bob`, they will see "Hello, Bob!".

However, because the application doesn't escape the `name` parameter, an attacker could send a link like `http://localhost:5000/?name=<script>alert('XSS')</script>`. If someone clicks on this link, instead of seeing a greeting, they will see a JavaScript alert box with the message "XSS".

### How to Prevent XSS?

To defend against XSS:

1. **Escape Output**: Ensure that all user data that is rendered to web pages is properly escaped. This means converting characters like `<`, `>`, and `&` to their respective HTML encoded forms.

2. **Validate and Sanitize Input**: Check user input against a strict set of rules (whitelisting) and sanitize any input before it is processed.

3. **Content Security Policy (CSP)**: Implementing a CSP header can reduce the risk of XSS attacks by restricting the sources and types of content that can be executed.

---

I hope this gives a clear understanding of Cross-Site Scripting. Remember, web security is crucial in today's online world, so always stay informed and cautious!